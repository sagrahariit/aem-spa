package com.aarav.wbx.core.model.servlet.get;

import javax.annotation.Nonnull;

import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Exporter;
import org.apache.sling.models.annotations.ExporterOption;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.Required;
import org.apache.sling.models.annotations.injectorspecific.Self;
import org.apache.sling.models.annotations.injectorspecific.SlingObject;

import com.adobe.cq.export.json.ComponentExporter;
import com.adobe.cq.export.json.ExporterConstants;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

/**
 * This file focuses on making a Sling Model compatible with AEM Content Services (and thus SPA Editor), as this requires:
 * a) Implementing the ComponentExporter interface.
 *
 * Note that these is a sibling interface to ComponentExporter, com.adobe.cq.export.json.ContainerExporter, that is used for components that included other components (like the Layout Container).
 *
 * For more detailed examples of Sling Models and Sling Model Exporters, see this file's sibling sample files (SampleSlingModel.class and SampleSlingModelExporter.class).
 */
@Model(adaptables = { SlingHttpServletRequest.class }, adapters = { SampleComponentExporter.class, ComponentExporter.class }, resourceType = SampleComponentExporter.RESOURCE_TYPE, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL
)
// name = the registered name of the exporter (  ExporterConstants.SLING_MODEL_EXPORTER_NAME => jackson )
// extensions = the extensions this exporter is registered to (ExporterConstants.SLING_MODEL_EXTENSION => json)
// selector = defaults to "model", can override as needed; This is helpful if a single resource needs 2 different JSON renditions.
//            (ExporterConstants.SLING_MODEL_SELECTOR => model)
@Exporter(name = ExporterConstants.SLING_MODEL_EXPORTER_NAME,
          selector = ExporterConstants.SLING_MODEL_SELECTOR, // The default is 'model', this is just reiterating this.
          extensions = ExporterConstants.SLING_MODEL_EXTENSION,
          options = {   // options are optional... this just shows that it is possible...
                        /**
                         * Jackson options:
                         * - Mapper Features: http://static.javadoc.io/com.fasterxml.jackson.core/jackson-databind/2.8.5/com/fasterxml/jackson/databind/MapperFeature.html
                         * - Serialization Features: http://static.javadoc.io/com.fasterxml.jackson.core/jackson-databind/2.8.5/com/fasterxml/jackson/databind/SerializationFeature.html
                         */
                        @ExporterOption(name = "MapperFeature.SORT_PROPERTIES_ALPHABETICALLY", value = "true"),
                        @ExporterOption(name = "SerializationFeature.WRITE_DATES_AS_TIMESTAMPS", value="false")
          }
)


// Mark as JSON Serializable as the Model's class (SampleComponentExporter.class) or interface if those are used.
@JsonSerialize(as = SampleComponentExporter.class)

// Make sure the Model implementation implements (or the Model interface extends) com.adobe.cq.export.json.ComponentExporter.
public class GetSlingServletModel implements ComponentExporter {
    static final String RESOURCE_TYPE = "acs-samples/components/content/sling-model/component-exporter";

    @Self
    private SlingHttpServletRequest request;

    @Self
    private Resource resource;

    // Injection will occur over all Injectors based on Ranking;
    // Force an Injector using @Source(..)
    // If an Injector is not working; ensure you are using the latest version of Sling Models
    @SlingObject
    @Required
    private ResourceResolver resourceResolver;

    @Nonnull
    @Override
    public String getExportedType() {
        // This method is required by ComponentExporter and its value populates the `:type` key in the JSON object.
        // The resource value is ~always the ResourceType for this model (See @Model(..) above).
        return RESOURCE_TYPE;
    }

    /**
     * Jackson Annotations on the method level are supported; ie. @JsonIgnore, @JsonProperty(..), etc.
     *
     * For Jackson Annotations: https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations
     */
    public String getMessage() {
        return String.format("Hi! from %s! I'm Content Services compatible!", resource.getPath());
    }
}

/*
import com.day.cq.search.PredicateGroup;
import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.result.SearchResult;
import com.day.cq.wcm.api.Page;
import com.day.cq.wcm.api.PageManager;
import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.models.annotations.*;
import org.apache.sling.models.annotations.injectorspecific.Self;
import org.apache.sling.models.annotations.injectorspecific.SlingObject;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;
import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.jcr.Session;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

@Model(adaptables = SlingHttpServletRequest.class, SampleComponentExporter.RESOURCE_TYPE, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class GetSlingServletModel {
 static final String RESOURCE_TYPE = "acs-samples/components/content/sling-model/component-exporter";

	@Self
	private SlingHttpServletRequest request;

	@Self
	@Via("resource")
	private Resource resource;

	@ValueMapValue
	@Named("jcr:title")
	@Required
	private String title;

	@ValueMapValue
	@Optional
	private String pageTitle;

	@ValueMapValue
	@Optional
	private String navTitle;

	@ValueMapValue
	@Named("jcr:created")
	private Calendar createdAt;

	@ValueMapValue
	@Named("jcr:description")
	@Default(values = "No Descriptioon Provided Shaielsh")
	private String description;

	@ValueMapValue
	@Default(booleanValues = false)
	boolean navRoot;

	@Inject
	private QueryBuilder quesryBuilder;

	@SlingObject
	private ResourceResolver resourceResolver;

	private long size;

	private Page page;

	@PostConstruct
	private void init() {

		page = resourceResolver.adaptTo(PageManager.class).getContainingPage(resource);

		final Map<String, String> map = new HashMap<>();
		map.put("path", page.getPath());
		map.put("type", "cq:Page");

		Query query = quesryBuilder.createQuery(PredicateGroup.create(map), resourceResolver.adaptTo(Session.class));
		final SearchResult result = query.getResult();
		this.size = result.getHits().size();
	}
	public String getTitle() {
		return StringUtils.defaultString(pageTitle, title);
	}

	  public String getDescription(int truncateAt) {
	       if (this.description != null && this.description.length() > truncateAt) {
	           return StringUtils.substring(this.description, truncateAt) + "...";
	       } else {
	           return this.description;
	       }
	   }

	   public String getDescription() {
	       return this.getDescription(10);
	   }
	   public long getSize() {
	       return this.size;
	   }
	   public Calendar getCreatedAt() {
	       return createdAt;
	   }
	   public String getPath() {
	       return page.getPath();

	   }
	}
*/

