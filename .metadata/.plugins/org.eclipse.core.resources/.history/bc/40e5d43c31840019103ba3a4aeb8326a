package com.aarav.wbx.core.model.servlet.get;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.jcr.Session;

import org.apache.jackrabbit.rmi.server.ServerSession;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.models.annotations.Default;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.Optional;
import org.apache.sling.models.annotations.Required;
import org.apache.sling.models.annotations.Via;
import org.apache.sling.models.annotations.injectorspecific.Self;
import org.apache.sling.models.annotations.injectorspecific.SlingObject;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;

import com.day.cq.search.PredicateGroup;
import com.day.cq.search.QueryBuilder;
import com.day.cq.wcm.api.Page;
import com.day.cq.wcm.api.PageManager;

@Model(adaptables = SlingHttpServletRequest.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class GetSlingServletModel {

	@Self
	private SlingHttpServletRequest request;

	@Self
	@Via("resource")
	private Resource resource;

	@ValueMapValue
	@Named("jcr:title")
	@Required
	private String title;

	@ValueMapValue
	@Optional
	private String pageTitle;

	@ValueMapValue
	@Optional
	private String navTitle;

	@ValueMapValue
	@Named("jcr:created")
	private Calendar createdAt;

	@ValueMapValue
	@Named("jcr:description")
	@Default(values = "No Descriptioon Provided Shaielsh")
	private String description;

	@ValueMapValue
	@Default(booleanValues = false)
	boolean navRoot;

	@Inject
	private QueryBuilder quesryBuilder;

	@SlingObject
	private ResourceResolver resourceResolver;

	private long size;

	private Page page;

	@PostConstruct
	private void init() {
			
		page = resourceResolver.adaptTo(PageManager.class).getContainingPage(resource);
		
		final Map<String, String> map = new HashMap<>();
		map.put("path", page.getPath());
		map.put("type", "cq:Page");
		
		Query query = quesryBuilder.createQuery(PredicateGroup.create(map), resourceResolver.adaptTo(Session.class));
		
		
		
	}

}
